{"version":3,"sources":["context/game/GameContext.tsx","data.ts","components/Button.tsx","components/game/Overlay.tsx","components/game/GameOverlay.tsx","components/game/Item.tsx","components/game/Game.tsx","components/boxs/intro/IntroBox.tsx","components/boxs/title/TitleBox.tsx","components/boxs/score/Box.tsx","components/boxs/score/ScoreBox.tsx","components/footer/Footer.tsx","components/Render.tsx","App.tsx","index.tsx"],"names":["StateContext","React","createContext","HandleContext","initBoard","GameContext","props","useState","board","setBoard","flags","setFlags","gameState","setGameState","score","setScore","bestScore","setBestScore","useEffect","_bestScore","window","localStorage","hasOwnProperty","Number","getItem","getRandom","Math","floor","random","checkGameOverFlags","useCallback","num","_flags","filter","flag","length","addScore","getScore","setItem","String","handleReset","_board","row","col","newBlock","handleUp","movedFlag","i","j","SIZE","k","handleLeft","console","log","handleRight","handleDown","children","Provider","value","reset","up","left","right","down","data","ment","button","scoreText","bestText","text","link","Button","className","useContext","handleClick","onClick","styled","memo","color","style","background","Ment","h1","GameOverlay","Value","b","data-value","itemList","push","keyUpEvent","e","key","document","addEventListener","removeEventListener","map","index","IntroBox","title","href","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c51e9568.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\ninterface GameContextProps {\n    children: React.ReactNode;\n}\n\n\nexport const StateContext = React.createContext<any>(null);\nexport const HandleContext = React.createContext<any>(null);\nconst initBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n]\nfunction GameContext(props: GameContextProps) {\n    const SIZE = 4;\n\n    const [board, setBoard] = useState(initBoard);\n    const [flags, setFlags] = useState<Boolean[]>([false, false, false, false]);\n    const [gameState, setGameState] = useState<number>(0);\n    /*\n    gameState\n    0 -> nothing\n    1 -> lose\n    2 -> win\n    */\n    const [score, setScore] = useState<number>(0);\n    const [bestScore, setBestScore] = useState<number>(0);\n\n    useEffect(() => {\n        const _bestScore =\n            window.localStorage.hasOwnProperty(\"bestScore\") ?\n                Number(window.localStorage.getItem(\"bestScore\")) :\n                0\n        setBestScore(_bestScore);\n    }, [])\n\n    const getRandom = () => {\n        return Math.floor(Math.random() * (4 - 0) + 0);\n    }\n\n    const checkGameOverFlags = useCallback((num: number) => {\n        const _flags: Boolean[] = [...flags];\n        _flags[num] = true;\n        const res = _flags.filter(flag => flag === true)\n        if (res.length === 4) { // game over\n            setGameState(1);\n        }\n        setFlags(_flags);\n    }, [flags]);\n\n    const addScore = useCallback((getScore: number) => {\n        if (getScore + score > bestScore) {\n            window.localStorage.setItem(\"bestScore\", String(getScore + score));\n            setBestScore(getScore + score);\n        }\n        setScore(getScore + score);\n    }, [bestScore, score]);\n\n    const handleReset = useCallback(() => {\n        const _board = [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n        ]\n        let row = getRandom();\n        let col = getRandom();\n        _board[row][col] = 2;\n        while (true) {\n            row = getRandom();\n            col = getRandom();\n            if (_board[row][col] === 0) {\n                _board[row][col] = 2;\n                break;\n            }\n        };\n        setBoard(_board);\n        setGameState(0);\n        setScore(0);\n        setBestScore(Number(window.localStorage.getItem(\"bestScore\")));\n    }, []);\n\n\n    const newBlock = useCallback(() => {\n        const _board = [...board];\n        while (true) {\n            const row = getRandom();\n            const col = getRandom();\n            if (_board[row][col] === 0) {\n                _board[row][col] = 2;\n                break;\n            }\n        };\n        setBoard(_board);\n        setFlags([false, false, false, false]); // reset flags\n    }, [board]);\n\n    const handleUp = useCallback(() => {\n        const _board = [...board];\n        let movedFlag: boolean = false;\n        let getScore = 0;\n        for (let i = 0; i < SIZE; i++) { // add same block\n            for (let j = 0; j < SIZE - 1; j++) {\n                if (_board[j][i] !== 0) {\n                    for (let k = j + 1; k < SIZE; k++) {\n                        if (_board[j][i] === _board[k][i]) {\n                            _board[k][i] *= 2;\n                            getScore += _board[k][i];\n                            _board[j][i] = 0;\n                            movedFlag = true;\n                            if (getScore === 2048) {\n                                setGameState(2);\n                            }\n                            break;\n                        } else if (_board[k][i] !== 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        for (let i = 0; i < SIZE; i++) { // move block\n            for (let j = 1; j < SIZE; j++) {\n                if (_board[j][i] !== 0) {\n                    for (let k = 0; k < j; k++) {\n                        if (_board[k][i] === 0) {\n                            _board[k][i] = _board[j][i];\n                            _board[j][i] = 0;\n                            movedFlag = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        setBoard(_board);\n        movedFlag === true ? newBlock() : checkGameOverFlags(0);\n        addScore(getScore);\n\n    }, [addScore, board, checkGameOverFlags, newBlock]);\n\n    const handleLeft = useCallback(() => {\n        const _board = [...board];\n        let getScore = 0;\n        let movedFlag: boolean = false;\n        for (let i = 0; i < SIZE; i++) { // add same block \n            for (let j = 0; j < SIZE - 1; j++) {\n                if (_board[i][j] !== 0) {\n                    for (let k = j + 1; k < SIZE; k++) {\n                        if (_board[i][j] === _board[i][k]) {\n                            console.log(_board[i][j], _board[i][k]);\n                            _board[i][k] *= 2;\n                            getScore += _board[i][k];\n                            _board[i][j] = 0;\n                            movedFlag = true;\n                            if (getScore === 2048) {\n                                setGameState(2);\n                            }\n                            break;\n                        } else if (_board[i][k] !== 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < SIZE; i++) { // move block\n            for (let j = 1; j < SIZE; j++) {\n                if (_board[i][j] !== 0) {\n                    for (let k = 0; k < j; k++) {\n                        if (_board[i][k] === 0) {\n                            _board[i][k] = _board[i][j];\n                            _board[i][j] = 0;\n                            movedFlag = true;\n                            if (getScore === 2048) {\n                                setGameState(2);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        setBoard(_board);\n        movedFlag === true ? newBlock() : checkGameOverFlags(1);\n        addScore(getScore);\n\n    }, [addScore, board, checkGameOverFlags, newBlock]);\n\n    const handleRight = useCallback(() => {\n        const _board = [...board];\n        let getScore = 0;\n        let movedFlag: boolean = false;\n        for (let i = 0; i < SIZE; i++) { // add same block \n            for (let j = SIZE - 1; j >= 1; j--) {\n                if (_board[i][j] !== 0) {\n                    for (let k = j - 1; k >= 0; k--) {\n                        if (_board[i][j] === _board[i][k]) {\n                            _board[i][k] *= 2;\n                            getScore += _board[i][k];\n                            _board[i][j] = 0;\n                            movedFlag = true;\n                            if (getScore === 2048) {\n                                setGameState(2);\n                            }\n                            break;\n                        } else if (_board[i][k] !== 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < SIZE; i++) { // move block\n            for (let j = (SIZE - 1) - 1; j >= 0; j--) {\n                if (_board[i][j] !== 0) {\n                    for (let k = (SIZE - 1); k > 0; k--) {\n                        if (_board[i][k] === 0) {\n                            _board[i][k] = _board[i][j];\n                            _board[i][j] = 0;\n                            movedFlag = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        setBoard(_board);\n        movedFlag === true ? newBlock() : checkGameOverFlags(2);\n        addScore(getScore);\n    }, [addScore, board, checkGameOverFlags, newBlock]);\n\n    const handleDown = useCallback(() => {\n        const _board = [...board];\n        let getScore = 0;\n        let movedFlag: boolean = false;\n        for (let i = 0; i < SIZE; i++) { // add same block \n            for (let j = SIZE - 1; j >= 1; j--) {\n                if (_board[j][i] !== 0) {\n                    for (let k = j - 1; k >= 0; k--) {\n                        if (_board[j][i] === _board[k][i]) {\n                            _board[k][i] *= 2;\n                            getScore += _board[k][i];\n                            _board[j][i] = 0;\n                            movedFlag = true;\n                            if (getScore === 2048) {\n                                setGameState(2);\n                            }\n                            break;\n                        } else if (_board[k][i] !== 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < SIZE; i++) { // move block\n            for (let j = (SIZE - 1) - 1; j >= 0; j--) {\n                if (_board[j][i] !== 0) {\n                    for (let k = SIZE - 1; k >= j; k--) {\n                        if (_board[k][i] === 0) {\n                            _board[k][i] = _board[j][i];\n                            _board[j][i] = 0;\n                            movedFlag = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        setBoard(_board);\n        movedFlag === true ? newBlock() : checkGameOverFlags(3);\n        addScore(getScore);\n\n    }, [addScore, board, checkGameOverFlags, newBlock]);\n\n\n\n    const { children } = props;\n    return (\n        <StateContext.Provider\n            value={{\n                board: board,\n                gameState: gameState,\n                score: score,\n                bestScore: bestScore\n            }}\n        >\n            <HandleContext.Provider\n                value={{\n                    reset: handleReset,\n                    up: handleUp,\n                    left: handleLeft,\n                    right: handleRight,\n                    down: handleDown\n                }}\n            >\n                {children}\n            </HandleContext.Provider>\n        </StateContext.Provider >\n    )\n}\n\nexport default GameContext\n","interface Data {\n    title: string,\n    button: string,\n    headText: string,\n    GameOver: {\n        ment: string;\n        button: string;\n    }\n    GameWin: {\n        ment: string;\n    }\n\n    Score: {\n        scoreText: string,\n        bestText: string,\n    }\n\n    Footer: {\n        text: string,\n        link: string,\n    }\n}\n\nexport  const data: Data = {\n    title: \"2048\",\n    button: \"New Game\",\n    headText: \"Make 2048!\",\n    GameOver: {\n        ment: \"Game Over!\",\n        button: \"Try again\"\n    },\n    GameWin: {\n        ment: \"You Win!\"\n    },\n    Score: {\n        scoreText: \"SCORE\",\n        bestText: \"BEST\",\n    },\n\n    Footer: {\n        text: \"view code\",\n        link: \"https://github.com/dobidugi/2048\"\n    }\n    \n};","import React, { useCallback, useContext } from 'react'\nimport styled from 'styled-components';\nimport { HandleContext } from '../context/game/GameContext';\nimport BaseProps from '../interface/BaseProps'\n\ninterface ButtonProps extends BaseProps {\n    text: string;\n}\n\nfunction Button(props: ButtonProps) {\n    const { className, text } = props;\n    const { reset } = useContext(HandleContext);\n    const handleClick = useCallback(() => {\n\n        reset();\n    }, [reset]);\n    return (\n        <button className={className} onClick={handleClick} >\n            <b>{text}</b>\n        </button>\n    )\n}\n\nexport default styled(React.memo(Button))` \n    width: 8em;\n    height: 2.5em;\n    margin: 0;\n    border: none;\n    background: #8F7A65;\n    color: #F8F6F1;\n    outline: none;\n    font-size: 1.2em;\n    border-radius: 0.3em;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport BaseProps from '../../interface/BaseProps'\n\ninterface OverlayProps extends BaseProps {\n    color: string;\n}\n\nfunction Overlay(props: OverlayProps) {\n    const { className, color } = props;\n    return (\n        <div className={className} style={{ background: color }}>\n        </div>\n    )\n}\n\n\n\nexport default styled(Overlay)` \n    position: absolute;\n    width: 100%;\n    height: 100%;\n    opacity: 0.5;\n    z-index: 1;\n`\n","import React from 'react'\nimport styled from 'styled-components';\nimport { data } from '../../data';\nimport BaseProps from '../../interface/BaseProps'\nimport Button from '../Button';\nimport Overlay from './Overlay';\n\nconst Ment = styled.h1`\n    font-size: 4em;\n    color: ${props => props.color};\n`;\n\ninterface GameOverlayProps extends BaseProps {\n    flag: boolean;\n    /*\n    flag -> false -> game lose\n    flag -> true -> game win\n    */\n}\nfunction GameOverlay(props: GameOverlayProps) {\n    const { className, flag } = props;\n\n    if (!flag) { // game lose\n        return (\n            <div className={className}>\n                <Ment color={\"#766E65\"} className={\"overlay_txt\"}>{data.GameOver.ment}</Ment>\n                <Button className={\"overlay_txt\"} text={String(data.GameOver.button)} />\n                <Overlay color={\"white\"} />\n            </div>\n        )\n    } else { // game win\n        return (\n            <div className={className}>\n                <Ment color={\"white\"} className={\"overlay_txt\"}>{data.GameWin.ment}</Ment>\n                <Overlay color={\"yellow\"} />\n            </div>\n        )\n    }\n\n}\n\nexport default styled(React.memo(GameOverlay))` \n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    animation: fadein 3s;\n    .overlay_txt {\n        z-index: 2;\n    }\n\n    \n    @keyframes fadein {\n        0% { opacity : 0;}\n        100% { opacity: 100;}\n    }\n    \n`\n","import React from 'react'\nimport styled from 'styled-components';\nimport BaseProps from '../../interface/BaseProps'\n\ninterface ItemProps extends BaseProps {\n    value?: number;\n}\n\nconst Value = styled.b`\n    font-size: 2em;\n    \n`\n\nfunction Item(props: ItemProps) {\n    const { className, value } = props;\n    return (\n        <div className={className} data-value={value}>\n            <Value data-value={value}>{value !== 0 ? value : \"\"}</Value>\n        </div>\n    )\n}\n\nexport default styled(Item)`\n    display: flex;\n    align-items: ceenter;\n    justify-content: center;\n    \n    margin: auto;\n`;\n","import React, { useContext, useEffect } from 'react'\nimport styled from 'styled-components';\nimport { HandleContext, StateContext } from '../../context/game/GameContext';\nimport BaseProps from '../../interface/BaseProps'\nimport GameOverlay from './GameOverlay';\nimport Item from './Item';\n\nfunction Game(props: BaseProps) {\n    const { className } = props;\n    const { board, gameState } = useContext(StateContext);\n    const { up, left, right, down } = useContext(HandleContext);\n    const itemList = [];\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            itemList.push(board[i][j]);\n        }\n    }\n    useEffect(() => {\n        function keyUpEvent(e: KeyboardEvent) {\n            if (gameState === 0) {\n                switch (e.key) {\n                    case 'Up': // ie / edge \n                    case 'ArrowUp':\n                    case 'w':\n                        up();\n                        break;\n                    case 'Left': // ie / edge \n                    case 'ArrowLeft':\n                    case 'a':\n                        left();\n                        break;\n                    case 'Right': // ie / edge \n                    case 'ArrowRight':\n                    case 'd':\n                        right();\n                        break;\n                    case 'Down': // ie / edge \n                    case 'ArrowDown':\n                    case 's':\n                        down();\n                        break;\n                }\n            }\n\n        }\n        window.document.addEventListener(\"keyup\", keyUpEvent);\n        return () => {\n            window.document.removeEventListener(\"keyup\", keyUpEvent);\n        }\n\n    });\n\n    return (\n        <div className={className}>\n            {gameState === 1 &&\n                <GameOverlay flag={false} />\n            }\n            {gameState === 2 &&\n                <GameOverlay flag={true} />\n            }\n            {\n                itemList.map((i: number, index: number) => (\n                    <Item key={index} className={\"item\"} value={i} />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default styled(Game)`\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    height: 35em;\n    justify-content: center;\n    align-items: center;\n    background: #BBAC9F;\n    border-radius: 2%;\n    flex-wrap: wrap;\n    \n\n    .item {\n        width:20%;\n        height: 20%;\n        margin: 2%;\n        align-items: center;\n        justify-content: center;\n        border-radius: 2%;\n    }\n    .item[data-value=\"0\"] {\n        background: #CCC0B3;\n    }\n    .item[data-value=\"2\"] {\n        background: #EEE3DA;\n        transition: all .3s ease-in-out;\n    }\n    .item[data-value=\"4\"] {\n        background: #EEE0C9;\n    }\n    .item[data-value=\"8\"] {\n        background: #F3B279;\n        color: white;\n    }\n    .item[data-value=\"16\"] {\n        background: #F69563;\n        color: white;\n    }\n    .item[data-value=\"32\"] {\n        background: #F77C5F;\n        color: white;\n    }\n    .item[data-value=\"64\"] {\n        background: #F75F3B;\n        color: white;\n    }\n    .item[data-value=\"128\"] {\n        background: #EDD073;\n        color: white;\n    }\n    .item[data-value=\"256\"] {\n        background: #EDCC61;\n        color: white;\n    }\n    .item[data-value=\"512\"] {\n        background: #EDC850;\n        color: white;\n    }\n    .item[data-value=\"1024\"] {\n        background: #EDC43F;\n        color: white;\n    }\n    .item[data-value=\"2048\"] {\n        background: #EDC22D;\n        color: white;\n    }\n    \n\n`\n","import React from 'react'\nimport styled from 'styled-components';\nimport { data } from '../../../data';\nimport BaseProps from '../../../interface/BaseProps'\nimport Button from '../../Button';\n\nfunction IntroBox(props: BaseProps) {\n    const { className } = props;\n    return (\n        <div className={className}>\n            <b className=\"intro_text\">{data.headText}</b>\n            <Button text={String(data.button)} />\n        </div>\n    )\n}\n\nexport default styled(React.memo(IntroBox))` \n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n    .intro_text {\n        font-size: 1.5em;   \n    }\n    margin-bottom: 1em;\n`\n","import React from 'react'\nimport styled from 'styled-components';\nimport { data } from '../../../data';\nimport BaseProps from '../../../interface/BaseProps'\n\nfunction TitleBox(props: BaseProps) {\n    const { className } = props;\n    return (\n        <div className={className}>\n            <b>{data.title}</b>\n\n        </div>\n    )\n}\n\nexport default styled(TitleBox)` \n    width: 100%;\n    \n    display: flex;\n\n    font-size: 5em;\n    font-weight: 800;\n`;\n","import React from 'react'\nimport styled from 'styled-components'\nimport BaseProps from '../../../interface/BaseProps'\n\ninterface BoxProps extends BaseProps {\n    title: string,\n    value: number\n}\n\n\nfunction Box(props: BoxProps) {\n    const { title, value, className } = props;\n    return (\n        <div className={className}>\n            <b>{title}</b>\n            <b className={\"score\"}>{value}</b>\n        </div>\n    )\n}\n\nexport default styled(Box)` \n    width: 10em;\n    height: 3em;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background:#BBAC9F;\n    margin-left: 1em;\n    border-radius: 3%;\n    b {\n        color: white;\n    }\n\n    .score {\n        font-size: 1.5em;\n        font-weight: bold;\n    }\n`\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport BaseProps from '../../../interface/BaseProps'\nimport Box from './Box';\nimport { data } from '../../../data';\nimport { StateContext } from '../../../context/game/GameContext';\nfunction ScoreBox(props: BaseProps) {\n    const { className } = props;\n    const { score, bestScore } = useContext(StateContext);\n    return (\n        <div className={className}>\n            <Box\n                title={data.Score.scoreText}\n                value={score}\n            />\n            <Box\n                title={data.Score.bestText}\n                value={bestScore}\n            />\n        </div>\n    )\n}\n\nexport default styled(ScoreBox)`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n\n    align-items: flex-end;\n\n\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { data } from '../../data';\nimport BaseProps from '../../interface/BaseProps'\n\n\nfunction Footer(props: BaseProps) {\n    const { className } = props;\n    return (\n        <div className={className}>\n            <a href={`${data.Footer.link}`}>{data.Footer.text}</a>\n        </div>\n    )\n}\n\nexport default styled(Footer)` \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 3em;\n    font-weight: 800;\n    a {\n        text-decoration: none;\n        \n    }\n    a:hover \n    {\n        text-decoration:none; \n        cursor:pointer;  \n    }\n\n`\n","import React from 'react'\nimport styled from 'styled-components';\nimport BaseProps from '../interface/BaseProps'\n\nimport Game from './game/Game';\nimport IntroBox from './boxs/intro/IntroBox';\nimport TitleBox from './boxs/title/TitleBox';\nimport ScoreBox from './boxs/score/ScoreBox';\nimport Footer from './footer/Footer';\n\nfunction Render(props: BaseProps) {\n    const { className } = props;\n    return (\n        <div className={className}>\n            <div className='top'>\n                <TitleBox />\n                <ScoreBox />\n            </div>\n            <IntroBox />\n            <Game />\n            <Footer />\n        </div>\n    )\n}\n\nexport default styled(Render)`\n    width: 40em;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .top {\n        width: 100%;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n`;\n","import React from 'react';\nimport Render from './components/Render';\nimport GameContext from './context/game/GameContext';\nfunction App() {\n  return (\n    <div className={`App`}>\n      <GameContext>\n        <Render />\n      </GameContext>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}